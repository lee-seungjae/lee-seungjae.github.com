<?xml version="1.0" encoding="utf-8" ?>
<rss version='0.92'>
<channel>
	<docs></docs>
	<title>lee-seungjae.github.io</title>
	<link>http://lee-seungjae.github.io/</link>
	<description></description>

			<item>
			<title>NDC18 - 실버바인 서버엔진 2 설계 리뷰</title>
			<pubDate>13 Apr 2019 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2018/sessions/NDC2018_0075.html]

2018년 4월 26일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2018-SilvervineServerEngine2DesignReview.html</link>
		</item>
			<item>
			<title>NDC17 - 개발자를 위한 제작진행개론: 일정대로 출시하기 왜 &amp; 어떻게</title>
			<pubDate>09 Aug 2017 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2017/sessions/NDC2017_0024.html]

2017년 4월 26일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2017-ProductionManagement.html</link>
		</item>
			<item>
			<title>NDC17 - NDC Replay 제작기 : static website, static backoffice</title>
			<pubDate>09 Aug 2017 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2017/sessions/NDC2017_0015.html]

2017년 4월 25일, 25분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2017-NDCReplay.html</link>
		</item>
			<item>
			<title>NDC17 - 내가 만든 언어의 개발환경을 Visual Studio Code로 빠르고 쉽게 구축하기</title>
			<pubDate>09 Aug 2017 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2017/sessions/NDC2017_0001.html]

2017년 4월 25일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2017-VSCodeExtensionDevelopment.html</link>
		</item>
			<item>
			<title>NDC16 - &lt;마비노기 듀얼&gt; 라이브 서비스 사건사고기록</title>
			<pubDate>07 Sep 2016 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2016/sessions/NDC2016_0067.html]

2016년 4월 28일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2016-MabinogiDuelIncidentReport.html</link>
		</item>
			<item>
			<title>NDC15 - 모바일 게임 개발자로의 변신! 마비노기 듀얼 서버 개발 이야기</title>
			<pubDate>19 Jul 2016 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2015/sessions/NDC2015_0072.html]

2015년 5월 21일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2015-DuelServerDevelopment.html</link>
		</item>
			<item>
			<title>NDC15 - 마비노기 듀얼: 분산 데이터베이스 트랜잭션 설계와 구현</title>
			<pubDate>19 Jul 2016 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[[NDC REPLAY 사이트에서 보기:http://ndcreplay.nexon.com/NDC2015/sessions/NDC2015_0071.html]

2015년 5월 21일, 50분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/NDC2015-DistributedTransaction.html</link>
		</item>
			<item>
			<title>인터뷰</title>
			<pubDate>26 Apr 2016 00:00:00 +0900</pubDate>
			<description>
			<![CDATA["데스크탑 히어로즈 정리할 때쯤, 다시는 동적 타입 언어로 큰 프로그램 만들지 않겠다고 결심했어요. 마비노기 2에서 AI 스크립팅 시스템 만들 때도, 단순 실수를 컴파일 타임에 못 잡는다는 점 때문에 정적 타입 스크립팅 언어를 새로 만들기도 했고요.

제가 2014년 가을에 듀얼에 합류했는데, 상황이 썩 좋지 않았어요. 듀얼 서버가 아직 매끈하게 돌고 있지 않았고, 여러 해 동안 진행하던 큰 프로젝트가 드랍된 뒤였기 때문에 스튜디오 분위기도 침체돼 있었어요. 시간이 없다, 최대한 빨리 사내테스트와 CBT를 해서 분위기를 반전시켜야 한다, 그게 제 판단이었어요. 그때까지 만들던 C# 서버 코드를 모두 버리고 새로 시작하기로 하면서 Lua를 골랐죠. 클라이언트가 Lua로 되어있기도 했고, 제가 Lua 다뤄본 경험이 많았거든요. 가장 빨리, 시행착오 거치지 않고 서비스하려면 Lua가 최선일 거라고 봤어요. 장기적으로 유지보수 문제가 있을 거라는 거 당연히 알고 있었지만 빨리 출시하는 게 그때는 더 중요했어요. 제가 참여해서 출시한 게임이 이렇게 오래... 서비스하고 있는 게 처음이라서, 유지보수 문제를 걱정할 수 있다는 게 행복한 상황이라고 생각해요.

지금의 경험을 가지고 그때로 돌아가도 같은 선택을 하겠냐고 물으신다면, 예, 그렇게 할 거예요. 극단적인 상황에서 내렸던 극단적인 선택이었고, 다른 상황에서는 다른 선택을 하겠죠."...]]>
			</description>
			<link>http://lee-seungjae.github.io/Interview.html</link>
		</item>
			<item>
			<title>NDC14 - 사례로 배우는 디스어셈블리 디버깅</title>
			<pubDate>27 May 2014 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[<TAG>
<iframe src="http://www.slideshare.net/slideshow/embed_code/35166099" width="687" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
</TAG>

2014년 5월 27일, 25분 세션....]]>
			</description>
			<link>http://lee-seungjae.github.io/DisassemblyDebugging.html</link>
		</item>
			<item>
			<title>처리량과 활용</title>
			<pubDate>30 Mar 2014 00:00:00 +0900</pubDate>
			<description>
			<![CDATA[Throughput(처리량)과 Utilization(활용)은 서로 다른 개념이다. 처리량은 같은 시간 동안 얼마나 많은 일을 해낼 수 있느냐를 뜻한다. 활용은 일꾼을 얼마나 바쁘게 일하게 하는지를 뜻한다. 처리량은 높을수록 좋다. 대체로 활용을 높이면 처리량도 따라서 높아지는 경향이 있지만 반드시 그런 것은 아니다.

처리량과 활용을 헷갈리면 '함수형 언어는 멀티코어를 활용하기 쉬워서 좋다' 같은 얘기를 하게 된다. 이 문장은 옳은지 그른지와 상관없이 별로 쓸모가 없다. 함수형 언어의 구현에 비효율이 있다면 활용이 높더라도 처리량은 낮을 수 있기 때문이다. 이를 쓸모있게 바꾸려면 '함수형 언어를 쓰면 적은 노력으로 높은 처리량을 달성할 수 있는데, 왜냐하면 멀티코어를 활용하기 편하기 때문이다' 로 고쳐 써야 하고, 실제로 처리량이 높음을 실측 자료로 보여야 한다....]]>
			</description>
			<link>http://lee-seungjae.github.io/ThroughputAndUtilization.html</link>
		</item>
	</channel>
</rss>
